SERVER CODE:
package nw;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.StringTokenizer;

public class server {

	public static String calculate(String expression) {
		StringTokenizer tokenizer = new StringTokenizer(expression, " ");
		if (tokenizer.countTokens() != 3)
			return "error";
		String result = "";
		int operand1 = Integer.parseInt(tokenizer.nextToken());
		String operator = tokenizer.nextToken();
		int operand2 = Integer.parseInt(tokenizer.nextToken());
		switch (operator) {
		case "+":
			result = Integer.toString(operand1 + operand2);
			break;
		case "-":
			result = Integer.toString(operand1 - operand2);
			break;
		case "*":
			result = Integer.toString(operand1 * operand2);
			break;
		case "/":
		    if (operand2 == 0)
		        throw new ArithmeticException("wrong value");
		    else
		        return Integer.toString(operand1/operand2);

		default:
			result = "error";
		}
		return result;
	}

	public static void main(String[] args) {
		BufferedReader input = null;
		BufferedWriter output = null;
		ServerSocket listener = null;
		Socket socket = null;

		try {
			listener = new ServerSocket(9999); // Create a server socket
			System.out.println("Waiting for connections...");
			socket = listener.accept(); // Wait for a connection request from the client
			System.out.println("Connected.");

			input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

			while (true) {
				String inputMessage = input.readLine();
				if (inputMessage.equalsIgnoreCase("bye")) {
					System.out.println("Client closed the connection.");
					break; // Close the connection if "bye" is received
				}
				System.out.println(inputMessage); // Print the received message to the console
				String result = calculate(inputMessage); // Perform calculations, and the result is stored in 'result'
				output.write(result + "\n"); // Send the result as a string
				output.flush();
			}
		} catch (IOException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				if (socket != null)
					socket.close(); // Close the communication socket
				if (listener != null)
					listener.close(); // Close the server socket
			} catch (IOException e) {
				System.out.println("An error occurred while chatting with the client.");
			}
		}
	}
}
CLIENT CODE: 
package client_;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.Scanner;

public class Client {
    public static void main(String[] args) {
        BufferedReader in = null;
        BufferedWriter out = null;
        Socket socket = null;
        Scanner scanner = new Scanner(System.in);

        try {
            socket = new Socket("localhost", 9999);
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

            while (true) {
                System.out.print("Expression (enter with spaces, e.g., 24 + 42)>> "); // Prompt
                String outputMessage = scanner.nextLine(); // Read the expression from the keyboard

                if (outputMessage.equalsIgnoreCase("bye")) {
                    out.write(outputMessage + "\n"); // Send the "bye" string
                    out.flush();
                    break; // If the user enters "bye", send it to the server and terminate the connection
                }

                // Validate the input format
                if (!isValidExpression(outputMessage)) {
                    System.out.println("Invalid expression format. Please enter a valid expression.");
                    continue; // Continue to the next iteration of the loop
                }

                out.write(outputMessage + "\n"); // Send the expression string read from the keyboard
                out.flush();

                String inputMessage = in.readLine(); // Receive the calculation result from the server

                // Check if the received message is not null
                if (inputMessage != null) {
                    // Check for an error message
                    if (inputMessage.startsWith("Error:")) {
                        System.out.println("Error: " + inputMessage.substring("Error:".length()));
                    } else {
                        System.out.println("Calculation Result: " + inputMessage);
                    }
                } else {
                    System.out.println("Error: Received a null message from the server.");
                }
            }
        } catch (IOException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                scanner.close();
                if (socket != null)
                    socket.close(); // Close the client socket
            } catch (IOException e) {
                System.out.println("An error occurred while chatting with the server.");
            }
        }
    }

    // Validate the expression format
    private static boolean isValidExpression(String expression) {
        // Implement your validation logic here
        // You may want to use regular expressions or other methods to validate the input format
        return true; // Placeholder, update with your validation logic
    }
}
